@namespace BlazorUiKit.Components
@typeparam T where T : notnull
@inherits UiKitComponentBase
@implements IUiList<T>

<CascadingValue Value="this" IsFixed="true">
    <ul @attributes="UserAttributes" class="@ComponentCss">
        @ChildContent
    </ul>
</CascadingValue>

@code
{
    [Parameter]
    public Direction Direction { get; set; } = Direction.Column;

    /// <summary>
    /// UserAttributes carries all attributes you add to the component that don't match any of its parameters.
    /// They will be splatted onto the underlying HTML tag.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? UserAttributes { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }


    [Parameter]
    public T? SelectedValue { get; set; }

    [Parameter]
    public EventCallback<T?> SelectedValueChanged { get; set; }

    protected T? CurrentSelectedValue
    {
        get => SelectedValue;
        set
        {
            var hasChanged = !EqualityComparer<T>.Default.Equals(value, SelectedValue);
            if (!hasChanged)
                return;

            _previousSelectedValue = SelectedValue;

            SelectedValue = value;
            _ = SelectedValueChanged.InvokeAsync(value);
            OnSelectedValueChanged(_previousSelectedValue);
        }
    }

    private Dictionary<T, IUiListItem<T>> _itemsDictionary = new();
    private T? _previousSelectedValue;
    
    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("flex gap-1.5 p-2");
        cssBuilder.AddClass(Direction.ToTailwindCss());
        cssBuilder.AddClass("rounded w-full");
    }

    protected override void OnParametersSet()
    {
        if (EqualityComparer<T>.Default.Equals(_previousSelectedValue, SelectedValue))
            return;
        
        OnSelectedValueChanged(_previousSelectedValue);
        _previousSelectedValue = SelectedValue;
    }

    public void RegisterListItem(IUiListItem<T> item)
    {
        _itemsDictionary.Add(item.Value, item);

        if (EqualityComparer<T>.Default.Equals(item.Value, SelectedValue))
        {
            item.SetSelected();
        }
    }

    public void UnRegisterListItem(IUiListItem<T> item)
    {
        _itemsDictionary.Remove(item.Value);
    }

    public void SetSelectedValue(T value)
    {
        CurrentSelectedValue = value;
    }

    private void OnSelectedValueChanged(T? previousValue)
    {
        UnSelectItemByValue(previousValue);
        SelectItemByValue(CurrentSelectedValue);
    }

    private void SelectItemByValue(T? value)
    {
        if (value is null)
            return;

        _itemsDictionary.TryGetValue(value, out var listItem);
        listItem?.SetSelected();
    }

    private void UnSelectItemByValue(T? value)
    {
        if (value is null)
            return;

        _itemsDictionary.TryGetValue(value, out var listItem);
        listItem?.SetUnselected();
    }
}
