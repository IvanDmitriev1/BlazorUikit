@namespace UiKit.Components
@typeparam T where T : notnull
@inherits UiKitComponentBase
@using UiKit.Abstractions.List
@implements IUiList<T>

<CascadingValue Value="this" IsFixed="true">
    <ul @attributes="UserAttributes" class="@ComponentCss">
        @ChildContent
    </ul>
</CascadingValue>

@code
{
    [Parameter]
    public Direction Direction { get; set; } = Direction.Column;

    /// <summary>
    /// UserAttributes carries all attributes you add to the component that don't match any of its parameters.
    /// They will be splatted onto the underlying HTML tag.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? UserAttributes { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public T? SelectedValue { get; set; }

    [Parameter]
    public EventCallback<T?> SelectedValueChanged { get; set; }

    protected T? CurrentSelectedValue
    {
        get => SelectedValue;
        set
        {
            var hasChanged = !EqualityComparer<T>.Default.Equals(value, SelectedValue);
            if (!hasChanged)
                return;

            var previousValue = SelectedValue;

            SelectedValue = value;
            _ = SelectedValueChanged.InvokeAsync(value);
            OnSelectedValueChanged(previousValue);
        }
    }


    [Parameter]
    public IUiListItem<T>? SelectedItem { get; set; }

    [Parameter]
    public EventCallback<IUiListItem<T>?> SelectedItemChanged { get; set; }

    protected IUiListItem<T>? CurrentSelectedItem
    {
        get => SelectedItem;
        set
        {
            var hasChanged = !EqualityComparer<IUiListItem<T>>.Default.Equals(value, SelectedItem);
            if (!hasChanged)
                return;

            SelectedItem = value;
            _ = SelectedItemChanged.InvokeAsync(value);
        }
    }

    private Dictionary<T, IUiListItem<T>> _itemsDictionary = new();

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("flex gap-1.5 p-2");
        cssBuilder.AddClass(Direction.ToTailwindCss());
        cssBuilder.AddClass("rounded w-full");
    }

    public void RegisterListItem(IUiListItem<T> item)
    {
        _itemsDictionary.Add(item.Value, item);

        if (EqualityComparer<T>.Default.Equals(item.Value, SelectedValue))
        {
            item.SetSelected();
            CurrentSelectedItem = item;
        }
    }

    public void UnRegisterListItem(IUiListItem<T> item)
    {
        _itemsDictionary.Remove(item.Value);
    }

    public void SetSelectedValue(T value)
    {
        CurrentSelectedValue = value;
    }

    private void OnSelectedValueChanged(T? previousValue)
    {
        if (CurrentSelectedValue is not null)
        {
            _itemsDictionary.TryGetValue(CurrentSelectedValue, out var listItem);
            CurrentSelectedItem = listItem;
        }

        UnSelectItemByValue(previousValue);
        SelectItemByValue(CurrentSelectedValue);
    }

    private void SelectItemByValue(T? value)
    {
        if (value is null)
            return;

        _itemsDictionary.TryGetValue(value, out var listItem);
        listItem?.SetSelected();
    }

    private void UnSelectItemByValue(T? value)
    {
        if (value is null)
            return;

        _itemsDictionary.TryGetValue(value, out var listItem);
        listItem?.SetUnselected();
    }
}
