@namespace UiKit.Components
@inherits UiKitComponentBase
@implements IAsyncDisposable

@inject IJSRuntime JsRuntime

<Stack HtmlTag="section" Class="@ComponentCss" Direction="Direction.Row">
    <IconButton Icon="@TablerIconType.ArrowLeft" Class="hidden md:block" OnClick="Previous"/>
    
    <SwipeArea Class="flex-1 flex flex-col items-center" OnSwipeEnd="OnSwipe">
        <div class="overflow-hidden @ImageContainerCss">
            <Image Src="@_selectedImageUrl"/>
        </div>
        
        @if (ShowPreviews)
        {
            <UiList T="string" Direction="Direction.Row" Class="gap-3 items-center md:justify-center flex-wrap md:flex-nowrap" SelectedValue="@_selectedImageUrl" SelectedValueChanged="OnSelectedValueChanged">
                @foreach (var imageUrl in ImagesUrls)
                {
                    <ImageGalleryItem Value="@imageUrl">
                        <Image Src="@imageUrl" Class="w-[130px] h-full"/>
                    </ImageGalleryItem>
                }
            </UiList>
        }
        else
        {
            <UiList T="string" Direction="Direction.Row" Class="gap-3 items-center justify-center" SelectedValue="@_selectedImageUrl" SelectedValueChanged="OnSelectedValueChanged">
                @foreach (var imageUrl in ImagesUrls)
                {
                    <ImageGalleryIconItem Value="@imageUrl"/>
                }
            </UiList>
        }
    </SwipeArea>
    
    <IconButton Icon="@TablerIconType.ArrowRight" Class="hidden md:block" OnClick="Next"/>
</Stack>

@code {

    [Parameter, EditorRequired]
    public IReadOnlyList<string> ImagesUrls { get; set; } = Array.Empty<string>();

    [Parameter, EditorRequired]
    public string ImageContainerCss { get; set; } = string.Empty;
    
    [Parameter]
    public bool ShowPreviews { get; set; }
    
    [Parameter]
    public TimeSpan AutoCycleTime { get; set; } = TimeSpan.Zero;

    int CurrentIndex
    {
        get => _currentIndex;
        set
        {
            if (value >= ImagesUrls.Count)
            {
                value = 0;
            }

            if (value < 0)
            {
                value = ImagesUrls.Count - 1;
            }
            
            _currentIndex = value;
            _selectedImageUrl = ImagesUrls[value];
        }
    }
    
    DotNetObjectReference<ImageGallery>? _objRef;
    string _selectedImageUrl = string.Empty;
    int _currentIndex = 0;
    Int64 _timestamp;

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("p-1 sm:p-3.5 gap-3.5");
        cssBuilder.AddClass(AlignItems.Center.ToTailwindCss());
        cssBuilder.AddClass(Color.Primary.ToBackgroundCss());
    }
    
    public async ValueTask DisposeAsync()
    {
        if (!IsJsRuntimeAvailable || _objRef is null)
            return;

        try
        {
            await JsRuntime.InvokeVoidAsync("UnRegisterImageGalleryTimer", _objRef);
            _objRef.Dispose();
        }
        catch (JSDisconnectedException)
        {
            
        }
    }

    protected override void OnInitialized()
    {
        _selectedImageUrl = ImagesUrls[0];
    }

    protected override async Task OnFirstRenderAsync()
    {
        if (AutoCycleTime == TimeSpan.Zero)
            return;
        
        _objRef = DotNetObjectReference.Create(this);
        await JsRuntime.InvokeVoidAsync("RegisterImageGalleryTimer", _objRef, AutoCycleTime.TotalMilliseconds);
    }

    [JSInvokable]
    public void InvokeNextFromJs()
    {
        var timeBetweenChanges = Stopwatch.GetElapsedTime(_timestamp);
        
        if (timeBetweenChanges <= AutoCycleTime)
            return;
        
        CurrentIndex++;
        StateHasChanged();
    }
    
    private void OnSelectedValueChanged(string value)
    {
        _selectedImageUrl = value;
        _timestamp = Stopwatch.GetTimestamp();
    }
    
    private void Previous()
    {
        CurrentIndex--;
        _timestamp = Stopwatch.GetTimestamp();
    }
    
    private void Next()
    {
        CurrentIndex++;
        _timestamp = Stopwatch.GetTimestamp();
    }

    private void OnSwipe(SwipeDirection direction)
    {
        switch (direction)
        {
            case SwipeDirection.LeftToRight:
                Next();
                break;
            case SwipeDirection.RightToLeft:
                Previous();
                break;
        }
    }
}
