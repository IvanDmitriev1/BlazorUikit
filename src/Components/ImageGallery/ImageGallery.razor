@namespace UiKit.Components
@inherits UiKitComponentBase

<Stack HtmlTag="section" Class="@ComponentCss" Direction="Direction.Row">
    <IconButton Icon="@TablerIconType.ArrowLeft" Class="hidden md:block" OnClick="() => CurrentIndex--"/>
    
    <Stack Class="flex-1" Direction="Direction.Column" AlignItems="AlignItems.Center">
        <div class="overflow-hidden @ImageContainerCss">
            <Image Src="@_selectedImageUrl"/>
        </div>

        @if (ShowPreviews)
        {
            <UiList T="string" Direction="Direction.Row" Class="gap-3 items-center md:justify-center flex-wrap md:flex-nowrap" @bind-SelectedValue="_selectedImageUrl">
                @foreach (var imageUrl in ImagesUrls)
                {
                    <ImageGalleryItem Value="@imageUrl">
                        <Image Src="@imageUrl" Class="w-[130px] h-full"/>
                    </ImageGalleryItem>
                }
            </UiList>
        }
        else
        {
            <UiList T="string" Direction="Direction.Row" Class="gap-3 items-center justify-center" @bind-SelectedValue="_selectedImageUrl">
                @foreach (var imageUrl in ImagesUrls)
                {
                    <ImageGalleryIconItem Value="@imageUrl"/>
                }
            </UiList>
        }
    </Stack>
    
    <IconButton Icon="@TablerIconType.ArrowRight" Class="hidden md:block" OnClick="() => CurrentIndex++"/>
</Stack>


@code {

    [Parameter, EditorRequired]
    public IReadOnlyList<string> ImagesUrls { get; set; } = Array.Empty<string>();

    [Parameter, EditorRequired]
    public string ImageContainerCss { get; set; } = string.Empty;
    
    [Parameter]
    public bool ShowPreviews { get; set; }

    int CurrentIndex
    {
        get => _currentIndex;
        set
        {
            if (value >= ImagesUrls.Count)
            {
                value = 0;
            }

            if (value < 0)
            {
                value = ImagesUrls.Count - 1;
            }
            
            _currentIndex = value;
            _selectedImageUrl = ImagesUrls[value];
        }
    }
    
    string _selectedImageUrl = string.Empty;
    int _currentIndex = 0;

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("p-1 sm:p-3.5 gap-3.5");
        cssBuilder.AddClass(AlignItems.Center.ToTailwindCss());
        cssBuilder.AddClass(Color.Primary.ToBackgroundCss());
    }

    protected override void OnInitialized()
    {
        _selectedImageUrl = ImagesUrls[0];
    }
}
