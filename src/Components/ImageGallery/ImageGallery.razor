@namespace BlazorUiKit.Components
@inherits UiKitRenderComponentBase
@implements IDisposable

@inject IJSRuntime JsRuntime

<Stack @ref="_rootElement"
       HtmlTag="section"
       Class="@ComponentCss"
       Direction="Direction.Column">
       
    <SwipeArea Class="flex items-center gap-5" OnSwipeEnd="OnSwipe">
        <UiButton Icon="@TablerIcon.ArrowLeft" Class="hidden md:block" @onclick="Previous" />

        <Image Src="@_selectedImageUrl" Class="@ImageContainerCss" />

        <UiButton Icon="@TablerIcon.ArrowRight" Class="hidden md:block" @onclick="Next" />
    </SwipeArea>
    
    @if (ShowPreviews)
    {
        <UiList T="string" Direction="Direction.Row" Class="gap-3 items-center md:justify-center flex-wrap md:flex-nowrap" SelectedValue="@_selectedImageUrl" SelectedValueChanged="OnSelectedValueChanged">
            @foreach (var imageUrl in ImagesUrls)
            {
                <ImageGalleryItem Value="@imageUrl">
                    <Image Src="@imageUrl" Class="w-[100px] h-full"/>
                </ImageGalleryItem>
            }
        </UiList>
    }
    else
    {
        <UiList T="string" Direction="Direction.Row" Class="gap-3 items-center justify-center" SelectedValue="@_selectedImageUrl" SelectedValueChanged="OnSelectedValueChanged">
            @foreach (var imageUrl in ImagesUrls)
            {
                <ImageGalleryIconItem Value="@imageUrl"/>
            }
        </UiList>
    }
</Stack>

@code {

    [Parameter, EditorRequired]
    public IReadOnlyList<string> ImagesUrls { get; set; } = Array.Empty<string>();

    [Parameter, EditorRequired]
    public string ImageContainerCss { get; set; } = string.Empty;
    
    [Parameter]
    public bool ShowPreviews { get; set; }
    
    [Parameter]
    public TimeSpan AutoCycleTime { get; set; } = TimeSpan.Zero;

    int CurrentIndex
    {
        get => _currentIndex;
        set
        {
            if (value >= ImagesUrls.Count)
            {
                value = 0;
            }

            if (value < 0)
            {
                value = ImagesUrls.Count - 1;
            }
            
            _currentIndex = value;
            _selectedImageUrl = ImagesUrls[value];
            AllowRender();
        }
    }
    
    DotNetObjectReference<ImageGallery>? _objRef;
    Stack? _rootElement;
    string _selectedImageUrl = string.Empty;
    int _currentIndex = 0;

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass(AlignItems.Center.ToTailwindCss());
    }
    
    public void Dispose()
    {
        _objRef?.Dispose();
    }

    protected override void OnInitialized()
    {
        CacheCss = true;
        _selectedImageUrl = ImagesUrls[0];
    }

    protected override Task OnFirstRenderAsync()
    {
        if (AutoCycleTime == TimeSpan.Zero)
            return Task.CompletedTask;
        
        _objRef = DotNetObjectReference.Create(this);
        return JsRuntime.InvokeVoidAsync("SetUpImageGalleryTimer", _rootElement!.ElementReference, AutoCycleTime.TotalMilliseconds, _objRef).AsTask();
    }

    [JSInvokable]
    public void InvokeNextFromJs()
    {
        CurrentIndex++;
        StateHasChanged();
    }
    
    private void OnSelectedValueChanged(string value)
    {
        _selectedImageUrl = value;
    }
    
    private void Previous()
    {
        CurrentIndex--;
    }
    
    private void Next()
    {
        CurrentIndex++;
    }

    private void OnSwipe(SwipeDirection direction)
    {
        switch (direction)
        {
            case SwipeDirection.LeftToRight:
                Next();
                break;
            case SwipeDirection.RightToLeft:
                Previous();
                break;
        }
    }
}
