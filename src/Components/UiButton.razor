@namespace BlazorUiKit.Components
@inherits UiKitComponentBase

<Element @attributes="@UserAttributes"
         Class="@ComponentCss"
         HtmlTag="@HtmlTag"
         type="@Type.ToHtml()"
         href="@Href"
         target="@HrefTarget.ToHtml()"
         disabled="@Disabled">
    
    @if (IconPosition == ButtonIconPosition.Left)
    {
        <UiKitIcon Class="mr-2.5" Icon="Icon" Size="Size"/>
    }
    
    @if (IconPosition == ButtonIconPosition.Content && Icon != TablerIcon.None)
    {
        <UiKitIcon Icon="Icon" Size="Size"/>
    }
    else
    {
        @ChildContent
    }
    
    @if (IconPosition == ButtonIconPosition.Right)
    {
        <UiKitIcon Class="ml-2.5" Icon="Icon" Size="Size"/>
    }
</Element>

@code
{
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? UserAttributes { get; set; }
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Href { get; set; }

    [Parameter]
    public HrefTarget HrefTarget { get; set; } = HrefTarget.Self;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public ButtonType Type { get; set; } = ButtonType.Button;

    [Parameter]
    public Color Color { get; set; } = Color.Primary;

    [Parameter]
    public Variant Variant { get; set; } = Variant.Filled;

    [Parameter]
    public Size Size { get; set; } = Size.Medium;

    [Parameter]
    public TablerIcon Icon { get; set; } = TablerIcon.None;

    [Parameter]
    public ButtonIconPosition IconPosition { get; set; } = ButtonIconPosition.Content;
    
    protected string HtmlTag { get; set; } = "button";

    protected override void OnParametersSet()
    {
        if (Disabled)
        {
            HtmlTag = "button";
            Href = null;
            return;
        }

        if (!string.IsNullOrWhiteSpace(Href))
        {
            HtmlTag = "a";
        }
    }

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("inline-flex justify-center items-center");
        cssBuilder.AddClass("select-none rounded border border-dark-gray-5 shadow-sm");
        cssBuilder.AddClass("focus:ring focus:outline-none");
        cssBuilder.AddClass("transition duration-300");

        cssBuilder.AddClass(Size switch{
            Size.Custom => string.Empty,
            Size.Small => "py-2.5 px-3",
            Size.Medium => "py-4 px-5 font-bold",
            Size.Large => "py-5 px-6 font-bold text-header",
            _ => throw new ArgumentOutOfRangeException()}, IconPosition != ButtonIconPosition.Content || Icon == TablerIcon.None);
        
        cssBuilder.AddClass("p-1.5", Icon != TablerIcon.None && IconPosition == ButtonIconPosition.Content);
        
        cssBuilder.AddClass(ThemeManager.ThemeProvider.BackgroundDisabledCss, Disabled);
        cssBuilder.AddClass(ThemeManager.ThemeProvider.TextDisabledCss, Disabled);

        if (Disabled)
        {
            return;
        }

        var swappedColor = Color == Color.Primary ? Color.Secondary : Color;
        
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundCss(Color), Variant == Variant.Filled);
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundHoverCss(swappedColor));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundActiveCss(Color));
            
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToRingFocusCss(Color));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextCss(Color));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextHoverCss(swappedColor));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextActiveCss(Color));
    }
}
