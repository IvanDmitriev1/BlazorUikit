@namespace BlazorUiKit.Components
@inherits TextInputBase<string>

<InputField Disabled="@Disabled"
            FullWidth="@FullWidth" 
            Errors="@Errors"
            Label="@Label"
            AdornmentPlacement="@AdornmentPlacement"
            ValidationCss="@ValidationCss"
            Class="@Class">
    <AdornmentRenderFragment>
        <InputAdornment Icon="@AdornmentIcon" Size="@AdornmentIconSize" AdornmentClick="@AdornmentClick" Class="@_adornmentCss" />
    </AdornmentRenderFragment>
    
    <InputRenderFragment>
        <UiInput @ref="@_input"
                 UserAttributes="@UserAttributes"
                 Class="@_inputCss"
                 Disabled="@Disabled"
                 InputMode="@InputMode"
                 ReadOnly="@ReadOnly"
                 Placeholder="@Placeholder"
                 MaxLength="@MaxLength"
                 Lines="@Lines"
                 InputType="@InputType"
                 
                 Text="@Text"
                 TextChanged="text => CurrentText = text"/>
    </InputRenderFragment>
</InputField>

@code
{
    /// <summary>
    /// Gets or sets an expression that identifies the bound value.
    /// </summary>
    [Parameter]
    public Expression<Func<string>>? TextExpression { get; set; }

    [Parameter]
    public string? InputClass { get; set; }

    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public InputType InputType { get; set; } = InputType.Text;

    
    [Parameter]
    public AdornmentPlacement AdornmentPlacement { get; set; }

    [Parameter]
    public TablerIcon AdornmentIcon { get; set; }

    [Parameter]
    public Size AdornmentIconSize { get; set; }

    [Parameter]
    public EventCallback AdornmentClick { get; set; }
    

    UiInput? _input;

    string _adornmentCss = string.Empty;
    string _inputCss = string.Empty;

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder) { }

    protected override void OnParametersSet()
    {
        For = TextExpression;

        base.OnParametersSet();

        if (_input is null || _input.Text == Text)
            return;

        _input.Text = Text;
        AllowRender();
    }

    protected override void OnInitialized()
    {
        _inputCss = AdornmentPlacement switch
        {
            AdornmentPlacement.None  => "px-3.5",
            AdornmentPlacement.Start => "pr-3.5",
            AdornmentPlacement.End   => "pl-3.5",
            _               => string.Empty
        };
    }

    protected override void OnTextChanged()
    {
        NotifyEditContext();
    }
}
