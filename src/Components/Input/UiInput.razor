@namespace BlazorUiKit.Components
@inherits TextInputBase<string>

@inject IJSRuntime JsRuntime

@if (Lines > 1)
{
    <textarea
            class="@_inputCss @ComponentCss resize-none outline-none"
            @ref="ElementReference"
            @attributes="UserAttributes"
            type="@InputType.ToHtml()"
            placeholder="@Placeholder"
            value="@_internalText"
            rows="@Lines"
            disabled="@Disabled"
            readonly="@ReadOnly"
            inputmode="@InputMode.ToHtml()"
            maxlength="@MaxLength"

            @oninput="OnInput"
            @onchange="OnChange">
    @Text
</textarea>
}
else
{
    <input class="@ComponentCss"
           @ref="ElementReference"
           @attributes="UserAttributes"
           type="@InputType.ToHtml()"
           placeholder="@Placeholder"
           value="@_internalText"
           disabled="@Disabled"
           readonly="@ReadOnly"
           inputmode="@InputMode.ToHtml()"
           maxlength="@MaxLength"

           @oninput="OnInput"
           @onchange="OnChange" />
}

@code {

    /// <summary>
    /// UserAttributes carries all attributes you add to the component that don't match any of its parameters.
    /// They will be splatted onto the underlying HTML tag.
    /// </summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> UserAttributes { get; set; } = new();
    
    [Parameter]
    public InputType InputType { get; set; } = InputType.Text;
    
    [Parameter]
    public bool Immediate { get; set; }
    
    [Parameter]
    public TimeSpan DebounceInterval { get; set; }
    
    public ElementReference ElementReference { get; private set; }
    
    DotNetObjectReference<UiInput>? _objRef;
    string? _internalText;
    bool _isFocused;
    string _inputCss = string.Empty;

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("input-control");
        
        cssBuilder.AddClass("flex-auto");
        cssBuilder.AddClass("py-4");

        cssBuilder.AddClass(_inputCss);
    }

    protected override void OnDispose()
    {
        _objRef?.Dispose();
    }

    protected override Task OnFirstRenderAsync()
    {
        if (DebounceInterval == TimeSpan.Zero)
        {
            return Task.CompletedTask;
        }
        
        _objRef = DotNetObjectReference.Create(this);
        return JsRuntime.InvokeVoidAsync("SetUpInputDebounceInterval", ElementReference, DebounceInterval.TotalMilliseconds, _objRef).AsTask();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_internalText == Text)
            return;

        UpdateInputCss();

        if (!OperatingSystem.IsBrowser() && !_isFocused)
        {
            _internalText = Text;
        }
        else
        {
            _internalText = Text;
        }

        AllowRender();
    }

    [JSInvokable]
    public void ChangeCurrentText(string newValue)
    {
        CurrentText = newValue;
    }

    private void OnInput(ChangeEventArgs obj)
    {
        if (!Immediate)
            return;

        _isFocused = true;
        CurrentText = obj.Value as string;
    }

    private void OnChange(ChangeEventArgs obj)
    {
        _internalText = obj.Value as string;

        if (!Immediate)
            CurrentText = obj.Value as string;
    }

    protected override void OnTextChanged()
    {
        base.OnTextChanged();

        UpdateInputCss();
    }

    private void UpdateInputCss()
    {
        if (string.IsNullOrEmpty(Text))
        {
            _inputCss = string.Empty;
            AllowRender();
        }
        else if (string.IsNullOrEmpty(_inputCss))
        {
            _inputCss = "has-text";
            AllowRender();
        }
    }
}
