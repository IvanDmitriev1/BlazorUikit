@namespace BlazorUiKit.Components
@inherits ValidationComponentBase<bool>

<div class="@Class">
    <label class="inline-flex items-center cursor-pointer">
        <span class="@ComponentCss @ValidationCss">
            <input type="checkbox" class="absolute opacity-0 cursor-pointer peer" @bind="CurrentChecked" />
            <UiKitIcon Class="invisible peer-checked:visible" Icon="@TablerIcon.Check" />
        </span>
    
        <UiText Class="ml-2.5 select-none">@Label</UiText>
    </label>

    @DisplayValidationErrors.DisplayValidationErrorsFragment(Errors)
</div>

@code
{
    [Parameter]
    public bool Checked { get; set; }

    [Parameter]
    public EventCallback<bool> CheckedChanged { get; set; }

    /// <summary>
    /// Gets or sets an expression that identifies the bound value.
    /// </summary>
    [Parameter]
    public Expression<Func<bool>>? CheckedExpression { get; set; }

    protected bool CurrentChecked
    {
        get => Checked;
        set
        {
            var hasChanged = !EqualityComparer<bool>.Default.Equals(value, Checked);
            if (!hasChanged)
                return;

            Checked = value;
            _ = CheckedChanged.InvokeAsync(value);
            NotifyEditContext();

            AllowRender();
        }
    }

    [Parameter]
    public string? Label { get; set; }

    protected override void OnInitialized()
    {
        IncludeClassCss = false;
        //CacheCss = true;
    }

    protected override void OnParametersSet()
    {
        For = CheckedExpression;

        base.OnParametersSet();
    }

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("p-1.5");
        cssBuilder.AddClass("inline-flex relative");
        cssBuilder.AddClass("transition duration-300");
        cssBuilder.AddClass("justify-center items-center overflow-hidden");

        cssBuilder.AddClass("rounded border border-dark-gray-5 shadow-sm");
        cssBuilder.AddClass("focus:ring focus:outline-none");
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundHoverCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundActiveCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToRingFocusCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextHoverCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextActiveCss(Color.Primary));
    }
}
