@namespace BlazorUiKit.Components
@inherits UiKitComponentBase

@inject VisibilityJsInterop VisibilityJsInterop

<div @ref="_element" class="@ComponentCss">
    @ChildContent
</div>

@if (AutoHide)
{
    <Overlay Visible="Open" Class="z-10" HiddenVariant="true" LockScroll="false" OnClick="Hide"/>
}

@code {
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool AutoHide { get; set; } = true;
    
    [Parameter, EditorRequired]
    public bool Open { get; set; }
    
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }
    
    protected bool CurrentOpen
    {
        get => Open;
        set
        {
            if (Open == value)
                return;
            
            Open = value;
            _ = OpenChanged.InvokeAsync(value);
        }
    }

    private ElementReference _element;
    
    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("hidden");
        cssBuilder.AddClass("absolute");
        cssBuilder.AddClass("w-full");
        cssBuilder.AddClass("drop-shadow-lg");
        cssBuilder.AddClass("select-none");
        cssBuilder.AddClass("z-20");
        
        cssBuilder.AddClass(ThemeManager.ThemeProvider.PageBackgroundCss);
    }

    protected override void OnInitialized()
    {
        CacheCss = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!IsJsRuntimeAvailable)
        {
            return;
        }
        
        if (Open)
        {
            await VisibilityJsInterop.DisplayElement(_element);
        }
        else
        {
            await VisibilityJsInterop.HideElement(_element);
        }
    }

    private async Task Hide()
    {
        CurrentOpen = false;
        await VisibilityJsInterop.HideElement(_element);
    }
}