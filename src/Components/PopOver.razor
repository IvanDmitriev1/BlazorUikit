@namespace BlazorUiKit.Components
@inherits UiKitComponentBase

@inject IJSRuntime JsRuntime

<div @ref="_element" class="@ComponentCss">
    @ChildContent
</div>

@if (AutoHide)
{
    <Overlay Visible="Open" Class="z-10" HiddenVariant="true" LockScroll="false" OnClick="Hide"/>
}

@code {
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool AutoHide { get; set; } = true;
    
    [Parameter, EditorRequired]
    public bool Open { get; set; }
    
    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }
    
    protected bool CurrentOpen
    {
        get => Open;
        set
        {
            if (Open == value)
                return;
            
            Open = value;
            _ = OpenChanged.InvokeAsync(value);
        }
    }

    private ElementReference _element;
    
    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("pointer-events-none opacity-0");
        cssBuilder.AddClass("transition-opacity duration-200");
        cssBuilder.AddClass("absolute");
        cssBuilder.AddClass("drop-shadow-lg");
        cssBuilder.AddClass("select-none");
        cssBuilder.AddClass("z-20");
        cssBuilder.AddClass("w-full max-h-[300px]");
        cssBuilder.AddClass("overflow-y-auto");
        
        cssBuilder.AddClass(ThemeManager.ThemeProvider.PageBackgroundCss);
    }

    protected override void OnInitialized()
    {
        CacheCss = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!IsJsRuntimeAvailable)
        {
            return;
        }
        
        if (Open)
        {
            await JsRuntime.ReplaceClass(_element, "opacity-0", "opacity-100");
            await JsRuntime.ReplaceClass(_element, "pointer-events-none", "pointer-events-auto");
        }
        else
        {
            await JsRuntime.ReplaceClass(_element, "opacity-100", "opacity-0");
            await JsRuntime.ReplaceClass(_element, "pointer-events-auto", "pointer-events-none");
        }
    }

    private async Task Hide()
    {
        CurrentOpen = false;
        await JsRuntime.ReplaceClass(_element, "opacity-100", "opacity-0");
        await JsRuntime.ReplaceClass(_element, "pointer-events-auto", "pointer-events-none");
    }
}