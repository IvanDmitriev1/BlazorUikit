@namespace BlazorUiKit.Components
@inherits UiKitComponentBase
@implements IAsyncDisposable

@inject IJSRuntime JsRuntime

<div class="@ComponentCss"
     style="@Style"
     aria-hidden="@NotVisible.ToHtml()"
     @onclick="OnClick"
     @onclick:stopPropagation="true"></div>

@code{

    [Parameter]
    public bool Visible { get; set; } = true;
    
    [Parameter]
    public bool HiddenVariant { get; set; }
    
    [Parameter]
    public string Style { get; set; } = string.Empty;

    [Parameter]
    public bool LockScroll { get; set; } = true;

    [Parameter]
    public ZIndex ZIndex { get; set; }

    [Parameter]
    public EventCallback OnClick { get; set; }

    
    private bool NotVisible => !Visible;

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("aria-hidden:hidden");
        cssBuilder.AddClass("h-screen w-screen");
        cssBuilder.AddClass("fixed top-0 left-0");
        cssBuilder.AddClass(ZIndex.ToTailwindCss());

        cssBuilder.AddClass("bg-main-dark-background/60", !HiddenVariant);
    }

    public ValueTask DisposeAsync()
    {
        if (!IsJsRuntimeAvailable || !LockScroll)
            return ValueTask.CompletedTask;

        return JsRuntime.InvokeVoidAsync("UnlockScroll");
    }

    protected override Task OnFirstRenderAsync() => LockScroll
        ? JsRuntime.InvokeVoidAsync("LockScroll").AsTask()
        : Task.CompletedTask;
}