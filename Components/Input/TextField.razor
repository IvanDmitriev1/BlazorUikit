@namespace BlazorUiKit.Components
@inherits UIKitInputBase<string>

@inject IJSRuntime JsRuntime

<InputField Label="@Label"
            Class="@Class"
            Disabled="@Disabled"
            AdornmentPlacement="@AdornmentPlacement"
            For="ValueExpression">
    <AdornmentRenderFragment>
        <InputAdornment Icon="@AdornmentIcon" Size="@AdornmentSize"  AdornmentPlacement="@AdornmentPlacement" AdornmentClick="@AdornmentClick" />
    </AdornmentRenderFragment>
    
    <InputRenderFragment>
        <UiTextInput @attributes="@AdditionalAttributes"
                     @ref="_input"
                     NameAttributeValue="@NameAttributeValue"
                     DebounceInterval="DebounceInterval"
                     Immediate="Immediate"
                     InputType="InputType"
                     ReadOnly="ReadOnly"
                     Disabled="Disabled"
                     Placeholder="@Placeholder"

                     Text="@Value"
                     TextChanged="text=> CurrentValue = text"/>
    </InputRenderFragment>
</InputField>

@code
{
    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public bool Immediate { get; set; }

    [Parameter]
    public TimeSpan DebounceInterval { get; set; }

    [Parameter]
    public InputType InputType { get; set; } = InputType.Text;

    
    [Parameter]
    public AdornmentPlacement AdornmentPlacement { get; set; }

    [Parameter]
    public TablerIcon AdornmentIcon { get; set; }

    [Parameter]
    public Size AdornmentSize { get; set; } = Size.Medium;

    [Parameter]
    public EventCallback AdornmentClick { get; set; }
    

    string InputCss => AdornmentPlacement switch
    {
        AdornmentPlacement.None  => "px-3.5",
        AdornmentPlacement.Start => "pr-3.5",
        AdornmentPlacement.End   => "pl-3.5",
        _ => throw new ArgumentOutOfRangeException()
    };


    UiTextInput? _input;

    protected override void OnParametersSet()
    {
        if (_input is null || _input.Text == Value)
            return;

        AllowRender();
    }

    [JSInvokable]
    public void ChangeCurrentText(string newValue)
    {
        CurrentValue = newValue;
    }

    protected override bool TryParseValueFromString(string? value, out string result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = null;
        return true;
    }
}
