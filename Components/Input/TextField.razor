@namespace BlazorUiKit.Components
@inherits UIKitInputBase<string>

@inject IJSRuntime JsRuntime

<InputField Label="@Label"
            Class="@Class"
            Disabled="@Disabled"
            AdornmentPlacement="@AdornmentPlacement">
    <AdornmentRenderFragment>
        <InputAdornment Icon="@AdornmentIcon" Size="@AdornmentSize"  AdornmentPlacement="@AdornmentPlacement" AdornmentClick="@AdornmentClick" />
    </AdornmentRenderFragment>
    
    <InputRenderFragment>
        <input @attributes="@AdditionalAttributes"
               @ref="_elementReference"
               name="@NameAttributeValue"
               value="@CurrentValue"
               @onchange="OnChange"/>
    </InputRenderFragment>
</InputField>

@code
{
    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public InputType InputType { get; set; } = InputType.Text;
    
    [Parameter]
    public bool Immediate { get; set; }

    [Parameter]
    public TimeSpan DebounceInterval { get; set; }

    
    [Parameter]
    public AdornmentPlacement AdornmentPlacement { get; set; }

    [Parameter]
    public TablerIcon AdornmentIcon { get; set; }

    [Parameter]
    public Size AdornmentSize { get; set; } = Size.Medium;

    [Parameter]
    public EventCallback AdornmentClick { get; set; }
    

    string InputCss => AdornmentPlacement switch
    {
        AdornmentPlacement.None  => "px-3.5",
        AdornmentPlacement.Start => "pr-3.5",
        AdornmentPlacement.End   => "pl-3.5",
        _ => throw new ArgumentOutOfRangeException()
    };

    string? _internalText;
    DotNetObjectReference<TextField>? _objRef;
    ElementReference _elementReference;

    protected override void Dispose(bool disposing)
    {
        _objRef?.Dispose();
    }

    protected override void OnParametersSet()
    {
        //AllowRender();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || DebounceInterval == TimeSpan.Zero)
        {
            return Task.CompletedTask;
        }

        _objRef = DotNetObjectReference.Create(this);
        return JsRuntime.InvokeVoidAsync("SetUpInputDebounceInterval", _elementReference, DebounceInterval.TotalMilliseconds, _objRef).AsTask();
    }

    [JSInvokable]
    public void ChangeCurrentText(string newValue)
    {
        CurrentValue = newValue;
    }

    protected override bool TryParseValueFromString(string? value, out string result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = null;
        return true;
    }

    private void OnChange(ChangeEventArgs obj)
    {
        _internalText = obj.Value as string;

        if (!Immediate)
            CurrentValue = obj.Value as string;
    }
}
