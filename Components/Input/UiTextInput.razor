@namespace BlazorUiKit.Components
@implements IDisposable
@inject IJSRuntime JsRuntime

@if (Lines > 1)
{
    <textarea @attributes="@AdditionalAttributes"
           @ref="ElementReference"
           class="@ComponentCss"
           name="@NameAttributeValue"
           rows="@Lines"
           disabled="@Disabled"
           readonly="@ReadOnly"
           placeholder="@Placeholder"
           @oninput="OnInput"
           @onchange="OnChange">
        @_internalText
    </textarea>
}
else
{ 
    <input @attributes="AdditionalAttributes"
           @ref="ElementReference"
           class="@ComponentCss"
           name="@NameAttributeValue"
           disabled="@Disabled"
           readonly="@ReadOnly"
           placeholder="@Placeholder"
           value="@_internalText"
           @oninput="OnInput"
           @onchange="OnChange" />
}

@code
{
    public ElementReference ElementReference { get; private set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public int Lines { get; set; } = 1;

    [Parameter]
    public bool Immediate { get; set; }

    [Parameter]
    public TimeSpan DebounceInterval { get; set; }

    [Parameter]
    public InputType InputType { get; set; } = InputType.Text;

    [Parameter, EditorRequired]
    public string? NameAttributeValue { get; set; }

    [Parameter]
    public string? Text { get; set; }

    [Parameter]
    public EventCallback<string?> TextChanged { get; set; }

    protected string? CurrentText
    {
        get => Text;
        set
        {
            var hasChanged = !EqualityComparer<string>.Default.Equals(value, Text);
            if (!hasChanged)
                return;

            Text = value;
            _ = TextChanged.InvokeAsync(value);
        }
    }

    protected string ComponentCss => _componentCss ??= BuildComponentCss();

    string? _componentCss;
    string? _internalText;
    DotNetObjectReference<UiTextInput>? _objRef;

    private string BuildComponentCss()
    {
        using var cssBuilder = new CssBuilder(stackalloc char[128]);

        cssBuilder.AddClass(Class);

        cssBuilder.AddClass("peer/input");
        cssBuilder.AddClass("flex-auto");
        cssBuilder.AddClass("py-4");

        //cssBuilder.AddClass("resize-none outline-none", Lines > 1);

        return cssBuilder.ToString();
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }

    protected override void OnParametersSet()
    {
        _internalText = CurrentText;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || DebounceInterval == TimeSpan.Zero)
        {
            return Task.CompletedTask;
        }

        _objRef = DotNetObjectReference.Create(this);
        return JsRuntime.InvokeVoidAsync("SetUpInputDebounceInterval", ElementReference, DebounceInterval.TotalMilliseconds, _objRef).AsTask();
    }

    [JSInvokable]
    public void ChangeCurrentText(string newValue)
    {
        CurrentText = newValue;
    }

    private void OnInput(ChangeEventArgs obj)
    {
        if (!Immediate)
            return;

        CurrentText = obj.Value as string;
    }

    private void OnChange(ChangeEventArgs obj)
    {
        _internalText = obj.Value as string;

        if (!Immediate)
            CurrentText = obj.Value as string;
    }
}
