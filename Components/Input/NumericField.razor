@namespace BlazorUiKit.Components
@typeparam T where T : System.Numerics.INumber<T>, System.Numerics.IMinMaxValue<T>
@using System.Globalization
@inherits UiKitInputBase<T>

@inject IJSRuntime JsRuntime

<InputField Disabled="@Disabled"
            Label="@Label"
            AdornmentPlacement="AdornmentPlacement.End"
            For="ValueExpression"
            Class="@Class"
            IsInvalid="IsInvalid">
    <AdornmentRenderFragment>
        @if (ShowArrows)
        {
            <Stack Direction="Direction.Column" Justify="Justify.SpaceBetween" Class="absolute top-0 right-0 mr-1.5 h-full">
                <UiButton Class="!p-0 m-0 mt-1" Size="Size.Small" Icon="@TablerIcon.ArrowUp" @onclick="OnUpButtonCallback" />
                <UiButton Class="!p-0 m-0 mb-1" Size="Size.Small" Icon="@TablerIcon.ArrowDown" @onclick="OnDownCallback" />
            </Stack>
        }
    </AdornmentRenderFragment>
    
    <InputRenderFragment>
        <UiTextInput @attributes="@AdditionalAttributes"
                     @ref="_textInput"
                     NameAttributeValue="@NameAttributeValue"
                     DebounceInterval="DebounceInterval"
                     Immediate="Immediate"
                     ReadOnly="ReadOnly"
                     Disabled="Disabled"
                     Placeholder="@Placeholder"
                     inputmode="numeric"
                     
                     max="@Max"
                     min="@Min"
                     step="@Step"

                     Text="@CurrentValueAsString"
                     TextChanged="text=> CurrentValueAsString = text" />
    </InputRenderFragment>
</InputField>

@code
{
    [Parameter]
    public T Min { get; set; } = T.MinValue;

    [Parameter]
    public T Max { get; set; } = T.MaxValue;

    [Parameter]
    public T Step { get; set; } = T.One;
    
    [Parameter]
    public bool Immediate { get; set; }
    
    [Parameter]
    public TimeSpan DebounceInterval { get; set; }

    [Parameter]
    public bool FullWidth { get; set; }

    [Parameter]
    public bool ShowArrows { get; set; }

    [Parameter]
    public string? InputCss { get; set; }

    UiTextInput? _textInput;

    protected override void OnInitialized()
    {
        Value = T.Zero;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (_textInput is null || _textInput.Text == CurrentValueAsString)
            return;

        AllowRender();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return Task.CompletedTask;

        return JsRuntime.InvokeVoidAsync("RegisterNumericInputEvent", _textInput!.ElementReference).AsTask();
    }

    private void OnUpButtonCallback()
    {
        var value = CurrentValue! + Step;
        if (value > Max)
            return;

        CurrentValue = value;
        AllowRender();
    }

    private void OnDownCallback()
    {
        var value = CurrentValue! - Step;
        if (value < Min)
            return;

        CurrentValue = value;
        AllowRender();
    }

    protected override bool TryParseValueFromString(string? value, out T result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        validationErrorMessage = null;

        if (string.IsNullOrWhiteSpace(value))
        {
            result = T.Zero;
            //AllowRender();

            return true;
        }

        if (!T.TryParse(value, CultureInfo.CurrentUICulture, out var convertedToValue))
        {
            result = T.Zero;
            return false;
        }
        
        if (convertedToValue < Min)
        {
            result = Min;
        }
        else if (convertedToValue > Max)
        {
            result = Max;
        }
        else
        {
            result = convertedToValue;
        }

        //AllowRender();
        return true;
    }

    protected override string? FormatValueAsString(T? value)
    {
        if (value?.ToString(null, CultureInfo.CurrentUICulture) is { } convertedText)
            return convertedText;

        return null;
    }
}
