@namespace BlazorUiKit.Components
@inherits InputBase<bool>

<div class="@Class">
    <label class="inline-flex items-center cursor-pointer">
        <span class="@ComponentCss">
            <input @attributes="@AdditionalAttributes"
                   @bind="Value"
                   type="checkbox"
                   name="@NameAttributeValue"
                   class="absolute opacity-0 cursor-pointer peer"/>
            <UiKitIcon Class="invisible peer-checked:visible" Icon="@TablerIcon.Check" />
        </span>
    
        <UiText Class="ml-2.5 select-none">@Label</UiText>
    </label>
    
    @if (EditContext is not null)
    {
        <ValidationMessage For="ValueExpression" />
    }
</div>

@code
{

    [Parameter]
    public string Class { get; set; } = string.Empty;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    static readonly string ComponentCss = BuildComponentCss();

    private static string BuildComponentCss()
    {
        using var cssBuilder = new CssBuilder(stackalloc char[128]);

        cssBuilder.AddClass("p-1.5");
        cssBuilder.AddClass("inline-flex relative");
        cssBuilder.AddClass("transition duration-300");
        cssBuilder.AddClass("justify-center items-center overflow-hidden");

        cssBuilder.AddClass("rounded border border-dark-gray-5 shadow-sm");
        cssBuilder.AddClass("focus:ring focus:outline-none");
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundHoverCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToBackgroundActiveCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToRingFocusCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextHoverCss(Color.Primary));
        cssBuilder.AddClass(ThemeManager.ThemeProvider.ToTextActiveCss(Color.Primary));

        return cssBuilder.ToString();
    }

    protected override bool TryParseValueFromString(string? value, out bool result, out string? validationErrorMessage)
        => throw new NotSupportedException($"This component does not parse string inputs. Bind to the '{nameof(CurrentValue)}' property, not '{nameof(CurrentValueAsString)}'.");
}
