@inherits UiKitComponentBase
@implements IDisposable

@inject NavigationManager NavigationManager

<Overlay Class="@OverlayCssBuilder()" LockScroll="false" OnClick="Hide">
    <div class="@ComponentCss" @onclick:stopPropagation="true">
        <Stack Direction="Direction.Row">
            <IconButton Icon="@TablerSvgIcon.X" OnClick="Hide"/>
            <div class="grow"></div>
        </Stack>

        @ChildContent
    </div>
</Overlay>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Open { get; set; }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    protected bool CurrentOpen
    {
        get => Open;
        set
        {
            if (Open == value)
                return;

            Open = value;
            _ = OpenChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public RenderFragment? TopMenu { get; set; }

    private IDisposable? _locationChangingRegistration;

    protected override void AddComponentCssClasses(ref CssBuilder cssBuilder)
    {
        cssBuilder.AddClass("container p-5 w-max");
        cssBuilder.AddClass("flex flex-col gap-3.5");
        cssBuilder.AddClass("cursor-default");
        cssBuilder.AddClass(ColorExtensions.FullBorderColor);
        cssBuilder.AddClass("drop-shadow-md");
        cssBuilder.AddClass(ColorExtensions.MainBackgroundColor);
    }

    private string OverlayCssBuilder()
    {
        using var cssBuilder = new CssBuilder(stackalloc char[55]);

        cssBuilder.AddClass(Open ? "flex" : "hidden");
        cssBuilder.AddClass("items-left");
        cssBuilder.AddClass("cursor-pointer");
        cssBuilder.AddClass("z-[1000]");

        return cssBuilder.ToString();
    }

    public void Dispose()
    {
        _locationChangingRegistration?.Dispose();
    }

    protected override void OnInitialized()
    {
        CacheCss = true;
    }

    protected override void OnFirstRender()
    {
        _locationChangingRegistration = NavigationManager.RegisterLocationChangingHandler(OnLocationChangingHandler);
    }

    private ValueTask OnLocationChangingHandler(LocationChangingContext arg)
    {
        Hide();
        return ValueTask.CompletedTask;
    }

    private void Hide()
    {
        CurrentOpen = false;
    }

}
